import { ClientProvider } from './clientProvider';
import { CacheService } from '../services/cache.service.mjs';

import array from 'lodash/array';

export class ChannelComparer {
    constructor() {
        this.cache = new CacheService();
    }

    async compare({ userChannel, userChannelTitle, advChannel, advChannelTitle, ctx }) {
        try {
            console.log(userChannel);
            let userChannelUsers = [];
            let cachedChannel = await this.cache.getField(userChannel);
            if (cachedChannel) {
                userChannelUsers = cachedChannel;
            } else {
                userChannelUsers = await ClientProvider.getChannelUsers(userChannel);
                if (!Array.isArray(userChannelUsers)) {
                    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–ø–æ–∑–∂–µ';
                }
                this.cache.setField(userChannel, userChannelUsers, 30);
            }

            let advChannelUsers = [];
            cachedChannel = await this.cache.getField(advChannel);
            if (cachedChannel) {
                advChannelUsers = cachedChannel;
            } else {
                advChannelUsers = await ClientProvider.getChannelUsers(advChannel);
                if (!Array.isArray(advChannelUsers)) {
                    return '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–ø–æ–∑–∂–µ';
                }
                this.cache.setField(advChannel, advChannelUsers, 30);
            }

            const userChannelInfo = this.getUserListInfo(userChannelUsers);
            userChannelInfo.intersection = array.intersectionBy(userChannelUsers, advChannelUsers, 'id').length;

            const advChannelInfo = this.getUserListInfo(advChannelUsers);

            console.table(userChannelInfo);
            // console.table(userChannelUsers);
            console.table(advChannelInfo);
            // console.table(advChannelUsers);

            /*
                var firstUserName = firstChannel.Username;
                var secondUserName = secondChannel.Username;
            */

            const compareResult = `‚≠êÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è:\n\n` +
            `üì¢ @${userChannel}(${userChannelTitle}) ${userChannelInfo.usersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n` +
            `üì¢ @${advChannel}(${advChannelTitle}) ${advChannelInfo.usersCount} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n` +
            `–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏: ${userChannelInfo.intersection} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (${Math.round(userChannelInfo.intersection * 100.00 / userChannelInfo.usersCount, 2)}% –¥–ª—è @${userChannel}, ${Math.round(userChannelInfo.intersection * 100.00 / advChannelInfo.usersCount, 2)} % –¥–ª—è @${advChannel}\n` +
            `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n\n` +
            `üìã –î–µ—Ç–∞–ª—å–Ω–æ –ø–æ @${userChannel}\n` +
            `ü§ñ Telegram –±–æ—Ç—ã: ${userChannelInfo.botCount}(${Math.round(userChannelInfo.botCount * 100.00 / userChannelInfo.usersCount, 2)}%)\n` +
            `üíö –ñ–∏–≤—ã–µ –ª—é–¥–∏: ${userChannelInfo.usersCount - userChannelInfo.botCount}(${Math.round((userChannelInfo.usersCount - userChannelInfo.botCount) * 100.00 / (userChannelInfo.usersCount), 2)}%)\n\n` +

            `üëÅ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑:\n` +
            `‚ñ´Ô∏è –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥: ${userChannelInfo.lastOnline.l3} (${Math.round(userChannelInfo.lastOnline.l3 * 100.00 / userChannelInfo.usersCount)}%)\n` +
            `‚ñ´Ô∏è –æ—Ç 3 –¥–Ω–µ–π –¥–æ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥: ${userChannelInfo.lastOnline.l7} (${Math.round(userChannelInfo.lastOnline.l7 * 100.00 / userChannelInfo.usersCount)}%)\n` +
            `‚ñ´Ô∏è –æ—Ç 7 –¥–Ω–µ–π –¥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥: ${userChannelInfo.lastOnline.l30} (${Math.round(userChannelInfo.lastOnline.l30 * 100.00 / userChannelInfo.usersCount)}%)\n` +
            `‚ñ´Ô∏è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥: ${userChannelInfo.lastOnline.lMore30} (${Math.round(userChannelInfo.lastOnline.lMore30 * 100.00 / userChannelInfo.usersCount)}%)\n\n` +
            `„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n\n` +

            `üìã –î–µ—Ç–∞–ª—å–Ω–æ –ø–æ @${advChannel}\n` +
            `ü§ñ Telegram –±–æ—Ç—ã: ${advChannelInfo.botCount}(${Math.round(advChannelInfo.botCount * 100.00 / advChannelInfo.usersCount, 2)}%)\n` +
            `üíö –ñ–∏–≤—ã–µ –ª—é–¥–∏: ${advChannelInfo.usersCount - advChannelInfo.botCount}(${Math.round((advChannelInfo.usersCount - advChannelInfo.botCount) * 100.00 / (advChannelInfo.usersCount), 2)}%)\n\n` +

            `üëÅ –ü–æ–¥–ø–∏—Å—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ö–æ–¥–∏–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑:\n` +
            `‚ñ´Ô∏è –æ—Ç 1 —Å–µ–∫—É–Ω–¥—ã –¥–æ 3 –¥–Ω–µ–π –Ω–∞–∑–∞–¥: ${advChannelInfo.lastOnline.l3} (${Math.round(advChannelInfo.lastOnline.l3 * 100.00 / advChannelInfo.usersCount, 2)}%)\n` +
            `‚ñ´Ô∏è –æ—Ç 3 –¥–Ω–µ–π –¥–æ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥: ${advChannelInfo.lastOnline.l7} (${Math.round(advChannelInfo.lastOnline.l7 * 100.00 / advChannelInfo.usersCount, 2)}%)\n` +
            `‚ñ´Ô∏è –æ—Ç 7 –¥–Ω–µ–π –¥–æ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥: ${advChannelInfo.lastOnline.l30} (${Math.round(advChannelInfo.lastOnline.l30 * 100.00 / advChannelInfo.usersCount, 2)}%)\n` +
            `‚ñ´Ô∏è –±–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞ –Ω–∞–∑–∞–¥: ${advChannelInfo.lastOnline.lMore30} (${Math.round(advChannelInfo.lastOnline.lMore30 * 100.00 / advChannelInfo.usersCount, 2)}%)\n`;

            return compareResult;
        } catch (e) {
            console.error(e);
            return '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ –ø–æ–ø—Ä–æ–±—É–π –Ω–µ–º–Ω–æ–≥–æ –ø–æ–ø–æ–∑–∂–µ';
        }
    }

    getDaysLeft(compareDate, today) {
        return compareDate < today ? Math.ceil((today - compareDate) / (1000 * 60 * 60 * 24)) : null;
    }

    getUserListInfo(list) {
        // console.log(list);
        const info = {
            usersCount: 0,
            botCount: 0,
            userDeletedCount: 0,
            intersection: 0,
            lastOnline: {
                l3: 0,
                l7: 0,
                l30: 0,
                lMore30: 0,
            },
        };

        info.usersCount = list.length;

        for (const user of list) {
            if (user.bot) {
                info.botCount ++;
                continue;
            }

            if (user.status === 'online') {
                info.lastOnline.l3 ++;
            } else if (user.status === 'recently') {
                info.lastOnline.l3 ++;
            } else if (user.status === 'week') {
                info.lastOnline.l7 ++;
            } else if (user.status === 'month') {
                info.lastOnline.l30 ++;
            } else {
                const date = new Date(user.status);
                const daysLeft = this.getDaysLeft(date, new Date());

                if (!daysLeft) {
                    continue;
                }

                if (daysLeft <= 3) {
                    info.lastOnline.l3 ++;
                } else if (daysLeft <= 7) {
                    info.lastOnline.l7 ++;
                } else if (daysLeft <= 30) {
                    info.lastOnline.l30 ++;
                } else {
                    info.lastOnline.lMore30 ++;
                }
            }
        }

        return info;
    }
}
